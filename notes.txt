##### INTRO ####
EASE OF PROGRAMMING
EFFICIENT EXECUTION & COMPILATION

go fmt formats all files in current dir
go fmt ./... formats all file in current and child dirs in current
go run 'file name' to run
go build builds executable
go install adds executable to the bin folder

insert commands in .bash_profile ( MAC )
export GOPATH=${HOME}/Documents/GitHub/go
export GOBIN=${HOME}/Documents/GitHub/go/bin
export PATH=${HOME}/go/bin:$PATH

entry point of program is package main func main
each package needs package main and func main

n, err := fmt.Println("Hello", 42, true) gets the number of bytes and errors if any.
n, _ means that we ignore the error and just throw it away

Cant have unused variables
The type 'interface{}' is the empty interface

## GO Spec
https://golang.org/ref/spec for spec

## Idiomatic GO
https://about.sourcegraph.com/go/idiomatic-go

## Numeric Types
int - numbers without decimals
    - int & uint
    - all numeric types are distinct except
        byte which is an alias for uint8
        rune which is an alias for int32
    - types are unique
    - Conversions are required when different numeric types are mixed in an expression or assignment.
        For instance, int32 and int are not the same type even though they may have the same size on a particular architecture
    - JUST USE int
float - numbers with decimals
      - JUST USE float64

runtime package
    - GOOS
    - GOARCH

## String
- A string value is a (possibly empty) sequence of bytes.
    Strings are immutable: once created, it is impossible to change the contents of a string.
- Can be created with Double Quotes "" or back ticks ``. Back ticks includes returns, whitespaces, etc.

## Constants
can have a const block instead of putting const for each variable
2 types (Constants of a kind):
    - typed
    - untyped

## Iota
- Can be used to auto-increment by 1
- i.e. in a const block declaring
const (
    a = iota
    b
    c
)

would produce: 1,2,3. separate const blocks would reset

## Bit Shifting
- remember numbers in binary: 0 = 0, 1 = 1, 2 = 10, 3 = 11, 4 = 100
- so if we had 0000 0010 we can shift like 0000 0100
- operators: >> and <<

## Control Flow

    ##Loops
        - There are three ways you can do loops in Go - they all just use the “for” keyword:
        - for init; condition; post { }
        - for condition { }
        - for { }

    ##Switch
        - A fallthrough statement transfers control to the next case.
        - It may be used only as the final statement in a clause.
        - A switch statement runs the first case equal to the condition expression.
        - The cases are evaluated from top to bottom, stopping when a case succeeds.
        - Unlike C and Java, the case expressions do not need to be constants.
        - A switch without a condition is the same as switch true.
        - A break statement terminates execution of the innermost for, switch, or select statement.
        - If you need to break out of a surrounding loop, not the switch, you can put a label on the loop and break to that label.

## Array
- building block for slices
- Arrays are values. Assigning one array to another copies all the elements.
- if you pass an array to a function, it will receive a copy of the array, not a pointer to it
- The size of an array is part of its type. The types [10]int and [20]int are distinct
- The value property can be useful but also expensive
- if you want C-like behavior and efficiency, you can pass a pointer to the array i.e. &arrayName
- USE SLICES INSTEAD

    ##SLICE
    - holds VALUES of the same TYPE
    - COMPOSITE LITERAL to create a slice.
      A composite literal is created by having the TYPE
      followed by CURLY BRACES and then putting the appropriate values in the curly brace area.
    - use the built in function make to specify how large our slice should be
      and also how large the underlying array should be. This can enhance performance a little bit
    - To DELETE from a slice, we use APPEND along with SLICING
## MAP
- The syntax for a map is map[key]value
- A map is the perfect data structure when you need to look up data fast.

    ##DELETE
    - delete(<map name>, “key”)
    - No error is thrown if you use a key which does not exist
    - To confirm you delete a key/value, verify that the key/value exists with the comma ok idiom

## Struct

- A struct is an composite data type.
  Structs allow us to compose together values of different types

  ## Embedded Struct
  - We can take one struct and embed it in another struct.
    When you do this the inner type gets promoted to the outer type so sa.firstName instead of sa.person.firstName

  ## Anonymous Struct
  - Struct which is not associated with a specific identifier.

## Functions

    - func (receiver) identifier(parameters) (returns) { code }
    - know the difference between parameters and arguments
    - we define our func with parameters (if any)
    - we call our func and pass in arguments (in any)
    - Everything in Go is PASS BY VALUE

    ## Variadic parameter
    - func which takes an unlimited number of arguments.
    - When use the lexical element operator “...T” to signify a variadic parameter (there “T” represents some type)

    ## Unfurling a slice
    - When you have a slice of some type, you can pass in the individual values in a slice by using the “...” operator

    ## Defer
    - function whose execution is deferred to the moment the surrounding function returnseither because the surrounding function executed a return statement,
      reached the end of its function body, or because the corresponding goroutine is panicking.

    ## Methods
    - A method is nothing more than a FUNC attached to a TYPE.
    - When you attach a func to a type it is a method of that type.
    - You attach a func to a type with a RECEIVER

    ## Interfaces & Polymorphism
    - Values can be of more than one type.
    - An interface allows a value to be of more than one type.
    - We create an interface using this syntax: “keyword identifier type”. i.e. “type human interface”
    - We then define which method(s) a type must have to implement that interface.
    - If a TYPE has the required methods, which could be none (the empty interface denoted by interface{}),
      then that TYPE implicitly implements the interface and is also of that interface type.
    - Values can be of more than one type.

    ## Anonymous Function
    - Anonymous self-executing func

    ## Function Expression
    - Assigning a func to a variable

    ## Returning a func
    - You can return a func from a func.

    ## Callback
    - passing a func as an argument
    - functional programming not something that is recommended in go, however, it is good to be aware of callbacks
    - idiomatic go: write clear, simple, readable code

    ## Closure
    - one scope enclosing other scopes
    - variables declared in the outer scope are accessible in inner scopes
    - closure helps us limit the scope of variables

    ## Recursion
    - a func that calls itself

## Pointers

    -  A pointer is a memory address.
        & - get the memory address i.e. &a
        *int - variable holding the address of that type
        * - dereference and get pointer value

    ## When to use Pointers
    - you don’t want to pass around a lot of data
    - you want to change the data at a location

    ## Method Sets
    - What is the set of methods for a given type? That is its method set.
    - IMPORTANT: “The method set of a type determines the INTERFACES that the type implements.....”
    - a NON-POINTER RECEIVER works with values that are POINTERS or NON-POINTERS.
    - a POINTER RECEIVER only works with values that are POINTERS.

## JSON with GO

    - struct fields should be capitalized, if not it wont be unmarshalled

## Sort
    - The sort package allows us to sort slices.

## BCrypt

    - Encrypt data
    - Using bcrypt, we will gain further understanding as to how to read and implement code from the standard library